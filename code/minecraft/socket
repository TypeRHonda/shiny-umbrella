var proto = require('./protocol'), events = require('events'), net = require('net'), util = require("util"), http = require('http'), https = require('https');
function concatBuffers(a, b) {    var buffer = new Buffer(a.length + b.length);    a.copy(buffer, 0, 0);    b.copy(buffer, a.length, 0);    return buffer;}
function socket() {    events.EventEmitter.call(this);}
util.inherits(socket, events.EventEmitter);
socket.prototype.connect = function(server, username, password, protoVersion, sessionID) {    if(password) {        var login = 'user='+username+'&password='+password+'&version=1000000';        https.request({host: 'login.minecraft.net', method: 'POST', headers:{'Content-Type': 'application/x-www-form-urlencoded', 'Content-Length': login.length}}, function(res) {            res.on('data', function(data) {                data = data.toString('utf8').trim();                                if(data == 'Bad login') {                    this.emit('error', 'Bad login');                    return;                }                                data = data.split(':');                username = data[2];                sessionID = data[3];                                this.connect(server, username, undefined, protoVersion, sessionID);            }.bind(this));        }.bind(this)).on('error', this.emit.bind(this, 'error')).end(login);        return;    }        this.server = server;    this.username = username;    this.protoVersion = protoVersion;    this.sessionID = sessionID;        this.pos = {x:0, y:0, z:0, stance:1.6};        server = server.split(':');        this.sock = new net.Socket({type: 'tcp4'}); //net.createConnection(server[1] || 25565, server[0]);    this.sock.on('error', this.emit.bind(this, 'error'));    this.sock.on('close', this.emit.bind(this, 'close', undefined));    this.sock.connect(server[1] || 25565, server[0]);            this.sock.on('connect', function() {        this.sock.on('data', this.processPackets.bind(this));        this.on('close', function() {            if(this.posEmitter)                clearInterval(this.posEmitter);            this.sock.end(proto.pack({type:proto.packets.DISCONNECT}));        }.bind(this));        this.send(proto.packets.HANDSHAKE, {username: username});    }.bind(this));};
socket.prototype.processPackets = function(data) {    try {        var start = 0;        if(this.lastBuffer)            data = concatBuffers(this.lastBuffer, data);        while(start < data.length) {            var packet = proto.unpack(data, start, proto[this.protoVersion].server2client);            if(!packet) {                this.lastBuffer = data.slice(start);                return;            }            if(packet.type == proto.packets.HANDSHAKE) {                if(packet.hash == '-')                    this.send(proto.packets.LOGIN, {protoVersion: this.protoVersion, username: this.username});                else {                    if(!this.sessionID) {                        this.emit('error', 'Server requires authentication');                        return;                    }                    http.get({host: 'session.minecraft.net', path: '/game/joinserver.jsp?user='+this.username+'&sessionId='+this.sessionID+'&serverId='+packet.hash}, function(res) {                        res.on('data', function(data) {                            data = data.toString('utf8');                                                        if(data == 'Bad login') {                                this.emit('error', 'Bad login');                                return;                            }                                                        this.send(proto.packets.LOGIN, {protoVersion: this.protoVersion, username: this.username});                        }.bind(this));                    }.bind(this));                }            } else if(packet.type == proto.packets.KEEPALIVE)                this.send(packet);            else if(packet.type == proto.packets.DISCONNECT)                this.emit('close', packet.message);            else if(packet.type == proto.packets.PLAYER_POS || packet.type == proto.packets.PLAYER_POS_LOOK) {                var c = false;                if(this.pos.x !== packet.x)                    this.pos.x = packet.x, c = true;                if(this.pos.y !== packet.y)                    this.pos.y = packet.y, c = true;                if(this.pos.z !== packet.z)                    this.pos.z = packet.z, c = true;                if(this.pos.stance !== packet.stance)                    this.pos.stance = packet.stance, c = true;                if(c)                    this.emit('position', this.pos);            } else if(packet.type == proto.packets.LOGIN) {                this.posEmitter = setInterval(function() {                    this.send(proto.packets.PLAYER_POS, this.pos);                }.bind(this), 20)                this.emit('packet', packet);            } else                this.emit('packet', packet);            start += packet.length;        }        delete this.lastBuffer;    } catch(e) {        this.emit('error', e);    }};
socket.prototype.send = function(type, packet) {    if(packet)        packet.type = type;    else        packet = type;    this.sock.write(proto.pack(packet, proto[this.protoVersion].client2server));};
exports.socket = socket;
