(function(Minecraft) {    /** @constructor */    Minecraft.Client = function(args) {    	if(Minecraft.ENVIRONMENT == 'node') {    		if(typeof Minecraft.node.net == 'undefined') Minecraft.node.net = require('net');    		if(typeof Minecraft.node.http == 'undefined') Minecraft.node.http = require('http');    		if(typeof Minecraft.node.https == 'undefined') Minecraft.node.https = require('https');    		if(typeof Minecraft.node.querystring == 'undefined') Minecraft.node.querystring = require('querystring');    		    		this.host = args.host;    		this.port = args.port || 25565;    		this.username = args.username || 'Player';    		this.password = args.password;    		this.protocol = args.protocol || 23;    		this.version = args.version || 12;    		    		this.currentVersion;    		this.downloadTicket;    		this.sessionId;    		    		this._status = 0;    		this._active = false;    		this._error = '';    		    		this.socket = new Minecraft.node.net.Socket();    		this.socket.on('data', function(data) {    			var buf = new Buffer(data);    			    			if(typeof Minecraft.protocol[buf[0]] != 'undefined') {	    			var packet = Minecraft.protocol[buf[0]].decode(data);	    			var packetData = packet.toObject();	    				    			console.log(packet);	    				    			switch(buf[0]) {	    				case 0x00:	    					if(this._active) {		    					this.send(Minecraft.protocol[0x00].encode(packetData));	    					}	    					break;	    				case 0x01:	    					if(this._status == 2) this._status = 3;	    				case 0x02:	    					if(this._status == 1) {		    					Minecraft.node.http.get({		    						host: 'session.minecraft.net',		    						path: '/game/joinserver.jsp?' +		    							Minecraft.node.querystring.stringify({		    								user: this.username,		    								sessionId: this.sessionId,		    								serverId: packetData.connectionHash		    							})		    					}, function(res) {		    						res.on('data', function(chunk) {			    						console.log(chunk.toString());			    						if(chunk.toString() == 'OK') {			    							this._status = 2;			    										    							this.send(Minecraft.protocol[0x01].encode({			    								protocolVersion: this.protocol,			    								username: this.username			    							}));			    						} else {			    							this.error(chunk.toString());			    						}		    						}.bind(this));		    					}.bind(this));	    					}	    					break;	    			}	    		} else {	    			console.log('Got unsupported packet (0x' + buf[0].toString(16) + ')');	    		}    		}.bind(this));    		this.socket.on('end', function() {    			this.error('Connection closed');    		});    	} else {    		throw new Error('Only supported in node');    	}    };        Minecraft.Client.prototype.login = function(callback) {    	this._active = true;    	    	var postData = Minecraft.node.querystring.stringify({    		user: this.username,    		password: this.password,    		version: this.version    	});    	    	var req = Minecraft.node.https.request({    		host: 'login.minecraft.net',    		method: 'POST',    		headers: {    			'Content-Type': 'application/x-www-form-urlencoded',    			'Content-Length': postData.length    		}    	}, function(res) {    		res.on('data', function (chunk) {    			if(this._status == 0) {    				console.log(chunk.toString());	    			var split = chunk.toString().split(':');			        if(split.length == 4) {			        	this.currentVersion = split[0];			    		this.downloadTicket = split[1];			    		this.username = split[2];			    		this.sessionId = split[3];			        	this._status = 1;			        				        	this.socket.connect(this.port, this.host, function() {				    		this.send(Minecraft.protocol[0x02].encode({			    				username: this.username			    			}));				    	}.bind(this));				    					    	var keepAlive = function() {				    		Minecraft.node.https.get({				    			host: 'login.minecraft.net',				    			path: '/session?' +					    			Minecraft.node.querystring.stringify({							    		name: this.username,							    		session: this.sessionId							    	})				    		});				    		setInterval(keepAlive, 6000 * Minecraft.MS_PER_TICK);				    	}.bind(this);				    	keepAlive();			        } else {			        	this.error(chunk.toString());			        }			    }		    }.bind(this));    	}.bind(this));    	req.write(postData);    };        Minecraft.Client.prototype.send = function(packet) {    	if(this._active) {    		this.socket.write(packet.toString());    		console.log('>>');    		console.log(packet.toString('hex'));    	}    };        Minecraft.Client.prototype.error = function(message) {    	console.log('ERROR: ' + message + ' (' + this._status + ')');    	this._status = -1;		this._error = message;		this._active = false;		this.socket.destroy();    };})(Minecraft);
