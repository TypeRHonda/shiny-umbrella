const FIRE_BALL_DAMAGE = 4;			// Damage fireball does. 4 = 2 hearts in normal MC or 1 heart in ACconst FIRE_BALL_ALT_DAMAGE = 8;		// Damage secondary fireball doesconst FIRE_BALL_ALT_FIRETIME = 200;	// Ammount of time that mobs will be on fire after being hit by a secondary fireballconst FIRE_BALL_RANGE = 1.5;		// Range that fireball will affect mobsconst FIRE_BALL_COST = 1;			// Mana cost for fireballconst FIRE_BALL_ALT_COST = 4;		// Mana cost for secondary fireballconst FIRE_BALL_MAX_MANA = 10;		// Max mana for fireballconst USE_PARTICLES = true;			// Determines if nifty particle effects will be used. Set to false to turn them offconst FIRE_BALL_ITEM = 332;			// Item ID of the fireballconst REGEN_DELAY = 30;				// Ticks between each point regenerated
var regenDelay = REGEN_DELAY;		// Timer for fireball regen
var fireballs = new Array();		// List of all shot fireballsvar pinv = player.getInventory();
// UI stuffvar screenWidth = ui.getWidth();var screenHeight = ui.getHeight();
var UI_fireballSprite = UISprite("/gui/items.png", (screenWidth / 2) + 10, screenHeight - 16 - 34, 16, 16, 224, 0);var UI_fireballBack = UIRect((screenWidth / 2) + 10, screenHeight - 16 - 34, 16, 16, 0.0, 0.0, 0.0, 0.25);var UI_fireballMana = UIRect((screenWidth / 2) + 13 + 16, screenHeight - 16 - 32, 60, 12, 0.0, 1.0, 0.0, 1.0);var UI_fireballManaBack = UIRect((screenWidth / 2) + 11 + 16, screenHeight - 16 - 34, 64, 16, 0.0, 0.0, 0.0, 0.25);
UI_fireballBack.removeFromScreen();UI_fireballSprite.removeFromScreen();UI_fireballMana.removeFromScreen();UI_fireballManaBack.removeFromScreen();
var fireballEquipped = false;
// Prevent fireball from being used up and disappearingfunction KeepFireball(){	var fireballSlot = pinv.getSlotContainingItem(FIRE_BALL_ITEM);		if (fireballSlot != -1)	{		var fireball = pinv.getItemInSlot(fireballSlot);		fireball.quantity = 0;	// Setting quantity to 0 prevents a number from showing up and prevents Minecraft from removing it when used	}}
// Regenerate fireball when heldfunction FireballRegen(){	var mainItem = pinv.getCurrentItem();	var offItem = pinv.getOffhandItem();		if ((mainItem != null && mainItem.getItemID() == FIRE_BALL_ITEM) || (offItem != null && offItem.getItemID() == FIRE_BALL_ITEM))	{		var fireballSlot = pinv.getSlotContainingItem(FIRE_BALL_ITEM);
		if (fireballSlot != -1)		{			var fireball = pinv.getItemInSlot(fireballSlot);			if (fireball.damage < 10)			{				regenDelay -= 1;				if (regenDelay <= 0)				{					regenDelay = REGEN_DELAY;					fireball.damage += 1;				}			}		}	}	else	{		regenDelay = REGEN_DELAY;	}}
// Handle fireball UIfunction FireballUI(){	var fireballSlot = pinv.getSlotContainingItem(FIRE_BALL_ITEM);	var fireball		if (fireballSlot != -1)	{		fireball = pinv.getItemInSlot(fireballSlot);		UI_fireballMana.width = 6 * fireball.getDamage();	}		var mainItem = pinv.getCurrentItem();	var offItem = pinv.getOffhandItem();		if ((mainItem != null && mainItem.getItemID() == FIRE_BALL_ITEM) || (offItem != null && offItem.getItemID() == FIRE_BALL_ITEM))	{		if (!fireballEquipped)		{			fireballEquipped = true;			UI_fireballBack.addToScreen();			UI_fireballSprite.addToScreen();			UI_fireballManaBack.addToScreen();			UI_fireballMana.addToScreen();		}	}	else	{		if (fireballEquipped)		{			fireballEquipped = false;			UI_fireballBack.removeFromScreen();			UI_fireballSprite.removeFromScreen();			UI_fireballMana.removeFromScreen();			UI_fireballManaBack.removeFromScreen();		}	}}
// Control fireballsfunction HandleFireballs(){	for (var i = 0; i < fireballs.length; i++)	{		if (fireballs[i][0].isAlive())		{			if (USE_PARTICLES)			{				// Create particles				for (var j = 0; j < 5; j++)				{					var x = fireballs[i][0].position.x + ((Math.random() * 0.2) - 0.1);					var y = fireballs[i][0].position.y + ((Math.random() * 0.2) - 0.1);					var z = fireballs[i][0].position.z + ((Math.random() * 0.2) - 0.1);					var arg1 = 1.0;					var arg2 = 0.5 + ((Math.random() * 0.5) - 0.25);					var arg3 = 0.0;										effect.spawnParticle("reddust", x, y, z, arg1, arg2, arg3);				}			}		}		else		{			var mobsHit = fireballs[i][0].getEntitiesWithinRange(FIRE_BALL_RANGE);			if (mobsHit != null)			{				for (var j = 0; j < mobsHit.length; j++)				{					if (mobsHit[j].getClassType() != "Item" && mobsHit[j].getClassType() != "Player")					{						if (fireballs[i][1])						{							mobsHit[j].setHealth(mobsHit[j].getHealth() - FIRE_BALL_ALT_DAMAGE);							mobsHit[j].setFireLevel(200);						}						else						{							mobsHit[j].setHealth(mobsHit[j].getHealth() - FIRE_BALL_DAMAGE);						}					}				}			}						if (USE_PARTICLES)			{				// Create partciles				var x = fireballs[i][0].position.x;				var y = fireballs[i][0].position.y;				var z = fireballs[i][0].position.z;							for (var j = 0; j < 25; j++)				{					var px = x + ((Math.random() * 0.5) - 0.25);					var py = y + ((Math.random() * 0.5) - 0.25);					var pz = z + ((Math.random() * 0.5) - 0.25);					effect.spawnParticle("lava", px, py, pz, 0.0, 0.0, 0.0);				}			}						// Remove fireball from the list			fireballs.splice(i, 1);		}	}}	
// Use fireballfunction UseFireball(){	var fireballSlot = pinv.getSlotContainingItem(FIRE_BALL_ITEM);		if (fireballSlot != -1)	{		var fireball = pinv.getItemInSlot(fireballSlot);		var search = player.getEntitiesWithinRange(0.2);				for (var i = 0; i < search.length; i++)		{			if (search[i].getClassType() == "Snowball")			{				if (fireball.damage - FIRE_BALL_COST >= 0)				{					fireball.damage -= FIRE_BALL_COST;					fireballs.splice(fireballs.length, 0, Array(search[i], false));				}				else				{					search[i].setDead();				}			}		}	}}
// Use secondary fireballfunction UseAltFireball(){	var fireballSlot = pinv.getSlotContainingItem(FIRE_BALL_ITEM);		if (fireballSlot != -1)	{		var fireball = pinv.getItemInSlot(fireballSlot);		var search = player.getEntitiesWithinRange(0.2);				for (var i = 0; i < search.length; i++)		{			if (search[i].getClassType() == "Snowball")			{				if (fireball.damage - FIRE_BALL_ALT_COST >= 0)				{					fireball.damage -= FIRE_BALL_ALT_COST;					fireballs.splice(fireballs.length, 0, Array(search[i], true));				}				else				{					search[i].setDead();				}			}		}	}}
