// Create two script properties://   nemSheet = Target Spreadsheet Id//   outdated = JSON array of Minecraft version strings you want to skip// The Spreadsheet must exist.//   You can create a template sheet inside called "template" to specify default formattings.
function fetchList(mcVersion) {  var response;  if (mcVersion) {    response = UrlFetchApp.fetch("https://bot.notenoughmods.com/" + mcVersion + ".json");  } else {    response = UrlFetchApp.fetch("https://bot.notenoughmods.com/?json");  }  return JSON.parse(response.getContentText());}
/** * Cleanup - For debugging and tests */function cleanup() {  var ssKey = PropertiesService.getScriptProperties().getProperty("nemSheet");  var spreadsheet = SpreadsheetApp.openById(ssKey);  var sheets = spreadsheet.getSheets()  for ( var sheet in sheets ) {    if (sheets[sheet].getName() !== "template")      spreadsheet.deleteSheet(sheets[sheet]);  }}
function ModlistGet() {  var ssKey = PropertiesService.getScriptProperties().getProperty("nemSheet");  var outdated = JSON.parse(PropertiesService.getScriptProperties().getProperty("outdated"));  var spreadsheet = SpreadsheetApp.openById(ssKey);  var sheet = spreadsheet.getSheetByName("ModList");  var versions = [];  var template = spreadsheet.getSheetByName("template");
  var r = [];  if ( !sheet ) { // Create a sheet if not exists    if ( template ) { // If a sheet exists called "template", use it.      sheet = spreadsheet.insertSheet("ModList", { template: template });    } else {      sheet = spreadsheet.insertSheet("ModList");    }  }
  var headers;  var versions = fetchList().filter(function(val, idx) {    try { // If ScriptProperty "outdated" is missing or invalid, just get everything instead of failing      if ( this.indexOf(val) === -1 )        return true;    } catch(e) {      Logger.log(e);      return true;    }  }, outdated);
  for (var i = 0, il = versions.length; i < il; i++) {    var ver = versions[i];    var modList = fetchList(ver);        headers = Object.keys(modList[0]);    var values = []    var sortKey;    // For each object in JSON result    for ( var m = 0, ml = modList.length; m < ml; m++ ) {      var mod = modList[m];      // Define one empty row      var row = [];      //Insert Minecraft version #      if ( ver.match(/^\d.\d$/) )        ver = ver + ".0"      row.push(ver);      // For each header column      headers.map(function(val, idx, arr) {        var prop = mod[val];        // Push the column data into the row        if (typeof prop === "object") { // Deal with arrays          row.push(prop.join(", "));        } else if (typeof prop === "number") { // Numbers are usually timestamps in this data          if (val === "lastupdated") // This is our sort key. +1 because I unshift mcVersion            sortKey = idx + 1;          row.push(new Date(prop * 1000));        } else {          row.push(prop);        }      });      // Push the row into the table      values.push(row);    }    // Sort by lastupdated (index get above)    values.sort(function(a, b){      return b[sortKey] - a[sortKey];    });    //Commit    r = r.concat(values);  };
  headers.unshift("mcVersion");  // Add header row  r.unshift(headers);
  sheet.getRange(1, 1, r.length, headers.length).setValues(r);}
