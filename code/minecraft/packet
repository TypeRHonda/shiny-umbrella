(function(Minecraft) {    /** @constructor */    Minecraft.Packet = function(id, data) {    	if(Minecraft.ENVIRONMENT == 'node') {    		this.id = id;    		this.data = data || [];    	} else {    		throw new Error('Only supported in node');    	}    };        Minecraft.Packet.prototype.get = function(key) {    	if(typeof key == 'number') return this.data[key].value;    	else if(typeof key == 'string') {    		for(var i = 0; i < this.data.length; i++) {    			if(this.data[i].name == key) return this.data[i].value;    		}    	}    };        Minecraft.Packet.prototype.append = function(name, type, value) {    	this.data.push({name: name, type: type, value: value});    };        Minecraft.Packet.prototype.toString = function(encoding) {    	var buf = new Buffer(this.getSize());    	var offset = 0;    	    	buf.writeInt8(this.id, offset);    	offset++;    	    	for(var i = 0; i < this.data.length; i++) {    		switch(this.data[i].type.toLowerCase()) {    			case 'byte':    				buf.writeInt8(this.data[i].value, offset);    				break;    			case 'ubyte':    				buf.writeUInt8(this.data[i].value, offset);    				break;    			case 'short':    				buf.writeInt16BE(this.data[i].value, offset);    				break;    			case 'int':    				buf.writeInt32BE(this.data[i].value, offset);    				break;    			case 'long':    				buf.writeInt32BE(this.data[i].value >> 4, offset);    				buf.writeInt32BE(this.data[i].value << 4 >> 4, offset + 4);    				break;    			case 'float':    				buf.writeFloatBE(this.data[i].value, offset);    				break;    			case 'double':    				buf.writeDoubleBE(this.data[i].value, offset);    				break;    			case 'string':    				buf.writeInt16BE(this.data[i].value.length, offset);    				offset += 2;    				    				if(this.data[i].value) {    					buf.write(this.data[i].value, offset, this.data[i].value.length * 2, 'ucs2');    					buf.switchEndian(offset, this.data[i].value.length * 2);    				}    				break;    			case 'bool':    				buf.writeInt8(this.data[i].value, offset);    				break;    		}    		    		if(this.data[i].type.toLowerCase() != 'string') {    			offset += Minecraft.Packet.prototype.types[this.data[i].type.toUpperCase()].size;    		} else {    			offset += this.data[i].value.length * 2;    		}    	}    	    	return buf.toString(encoding || 'utf8');    };        Minecraft.Packet.prototype.toObject = function() {    	var output = {};    	    	for(var i = 0; i < this.data.length; i++) {    		output[this.data[i].name] = this.data[i].value;    	}    	    	return output;    };        Minecraft.Packet.prototype.getSize = function() {    	var output = 1;    	    	for(var i = 0; i < this.data.length; i++) {    		if(this.data[i].type.toLowerCase() != 'string') {    			output += Minecraft.Packet.prototype.types[this.data[i].type.toUpperCase()].size;    		} else {    			if(this.data[i].value) output += this.data[i].value.length * 2;    			output += 2;    		}    	}    	    	return output;    };        Minecraft.Packet.prototype.types = {    	BYTE: {size: 1},    	UBYTE: {size: 1},    	SHORT: {size: 2},    	INT: {size: 4},    	LONG: {size: 8},    	FLOAT: {size: 4},    	DOUBLE: {size: 8},    	STRING: {size: 2},    	BOOL: {size: 1}    };})(Minecraft);
