import Promise from 'bluebird';import bhttp from 'bhttp';import config from '../config';
export default {
    /**     * Get a Minecraft Servers Information     * @param server     * @param callback     */    ping(server, callback) {        if (typeof(callback) === 'function' && typeof(server) === 'string') {            Promise.try(() => config.urls.pingUrl)            .then(url => bhttp.get(url + server, config.header))            .then(data => {                const online = (data.body.online == true) ? 'online' : 'offline';                const motd = JSON.parse(data.body.motd).extra;
                return callback(null, {                    ip: server,                    status: online,                    players: data.body.players,                    motd: motd[0].text,                    icon: data.body.favicon,                    source: 'us.mc-api.net'                });            })            .catch(err => callback(new Error(err), null));        } else {            return new Error('Callback is not a type of function or Server is not a string.');        }    },
    /**     * Converts Minecraft Username to UUID     * @param username     * @param callback     */    usernameToUuid(username, callback) {        if (typeof(callback) === 'function' && typeof(username) === 'string') {            Promise.try(() => config.urls.mcapiUrl)            .then(url => bhttp.get(url + username, config.header))            .then(data => callback(null, {                uuid: data.body.full_uuid,                hexUuid: data.body.uuid,                username: data.body.name,                source: 'us.mc-api.net'            }))            .catch(err => callback(new Error(err), null));        } else {            return new Error('Callback is not a type of function or Username is not a string.');        }    },
    /**     * Convert UUID to Username     * @param uuid     * @param callback     */    uuidToUsername(uuid, callback) {        if (typeof(callback) === 'function' && typeof(uuid) === 'string') {
            Promise.try(() => config.urls.mcapiUrl2)            .then(url => bhttp.get(url + uuid.replace('\-\g', '')))            .then(data => callback(null, {                uuid: data.body.full_uuid,                hexUuid: data.body.uuid,                username: data.body.name,                source: 'us.mc-api.net'            })).catch(err => callback(new Error(err), null));        } else {            return new Error('Callback is not a type of function or UUID is not a string.');        }    },
    /**     * Returns Minecraft Username's History     * @returns {Error}     */    usernameHistory(uuid, callback) {        if (typeof(callback) === 'function' && typeof(uuid) === 'string') {
            Promise.try(() => config.urls.mcapiUrl3)            .then(url => bhttp.get(url + uuid.replace('\-\g', '')))            .then(data => callback(null, {                uuid: data.body.query,                history: data.body.history,                source: 'us.mc-api.net'            }))            .catch(err => callback(new Error(err), null));        } else {            return new Error('Callback is not a type of function or UUID is not a string.');        }    }    };
