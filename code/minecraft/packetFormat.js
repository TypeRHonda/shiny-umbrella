(function(Minecraft) {    /** @constructor */    Minecraft.PacketFormat = function(id, toServer, toClient) {    	if(Minecraft.ENVIRONMENT == 'node') {    		this.id = id;    		    		if(typeof toServer != 'undefined') {	    		if(!Array.isArray(toServer)) {	    			this.toServer = [toServer];	    		} else {	    			this.toServer = toServer;	    		}    		} else {    			throw new Error('Format was not specified');    		}    		    		if(typeof toClient != 'undefined') {    			if(!Array.isArray(toClient)) {	    			this.toClient = [toClient];	    		} else {	    			this.toClient = toClient;	    		}    		} else {    			this.toClient = this.toServer;    		}    	} else {    		throw new Error('Only supported in node');    	}    };        Minecraft.PacketFormat.prototype.encode = function(data, toClient) {    	var packet = new Minecraft.Packet(this.id);    	    	var format = this.toServer;    	if(toClient) format = this.toClient;    	    	for(var i = 0; i < format.length; i++) {    		if(typeof data[format[i].name] != 'undefined') {    			packet.append(format[i].name, format[i].type, data[format[i].name]);    		} else {    			var value;    			switch(format[i].type) {	    			case 'string':	    				value = '';	    				break;	    			case 'bool':	    				value = false;	    				break;	    			default:	    				value = 0;	    				break;    			}    			packet.append(format[i].name, format[i].type, value);    		}    	}    	    	return packet;    };        Minecraft.PacketFormat.prototype.decode = function(data, toServer) {    	    	var format = this.toClient;    	if(toServer) format = this.toServer;    	    	var buf = new Buffer(data);    	    	var packet = new Minecraft.Packet(buf[0]);    	    	var offset = 1;    	    	for(var i = 0; i < format.length; i++) {    		var value, stringLength = 0;    		    		switch(format[i].type.toLowerCase()) {    			case 'byte':    				value = buf.readInt8(offset);    				break;    			case 'ubyte':    				value = buf.readUInt8(offset);    				break;    			case 'short':    				value = buf.readInt16BE(offset);    				break;    			case 'int':    				value = buf.readInt32BE(offset);    				break;    			case 'long':    				//TODO: figure out how to handle 64-bit    				value = buf.readInt32BE(offset);    				break;    			case 'float':    				value = buf.readFloatBE(offset);    				break;    			case 'double':    				value = buf.readDoubleBE(offset);    				break;    			case 'string':    				stringLength = buf.readInt16BE(offset);    				offset += 2;    				    				buf.switchEndian(offset, stringLength * 2);    				    				value = '';    				for(var j = 0; j < stringLength * 2; j+=2) {    					value += String.fromCharCode(buf.readInt8(offset + j) + buf.readInt8(offset + j + 1));    				}    				    				break;    			case 'bool':    				value = buf.readInt8(offset);    				break;    		}    		    		packet.append(format[i].name, format[i].type, value);    		    		if(format[i].type.toLowerCase() != 'string') {    			offset += Minecraft.Packet.prototype.types[format[i].type.toUpperCase()].size;    		} else {    			offset += stringLength * 2;    		}    	}    	    	return packet;    };})(Minecraft);
