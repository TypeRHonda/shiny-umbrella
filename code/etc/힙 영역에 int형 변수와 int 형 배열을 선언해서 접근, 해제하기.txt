/* int 형 변수와 int 형 배열을 각각하나씩 선언해서 접근하고 또 해제해 보자*/

#include<stdio.h>
#include<stdlib.h>

int main (void)
{
	int * ptr1 = (int*)malloc(sizeof(int)); // sizeof 연산을 해서 실질적으로 malloc 함수 소괄호에는 정수 4가들어간다        // 6행
	int * ptr2 = (int*)malloc(sizeof(int)*7); // *7을 했기에 정수 28이 소괄호에 들어간다                                    // 7행
	int i;

	*ptr1=20; //이게 되나 ? malloc은 반환형이 void 형인데 위에서는 int 형으로 반환을 하고있기에 될거 같다.                 // 10행
	for(i=0;i<7;i++)                                                                                                       //  11행
		ptr2[i]=i+1; //ptr2를 배열로 잡고 있다.                                                                            //   12행

	printf("%d\n",*ptr1); //ptr1주소에 저장된 값을 정수값이니 %d로 출력중                                                  // 14행
	for(i=0;i<7;i++)                                                                                                       // 15행
		printf("%d ",ptr2[i]);                                                                                             // 16행

	free(ptr1); // malloc 함수로 연 힙영역의 ptr1 변수를 닫고있다                                                          // 18행
	free(ptr2); // malloc 함수로 연 힙영역의 ptr2 변수를 닫고있다.                                                         // 19행
	return 0;
}



/*
6행 : int형 변수의 주소값을 int형 포인터 이므로 int 형 포인터로 형변환 하였다.
7행 : int형 1차원 배열의 주소 값 역시 int형 포인터 이다. 따라서 int형 포인터로 형 변환 하였다.
10~12행 : 힙 영역에 할당된 변수와 배열에 접근하여 값 을 저장하고 있다.
14~16행 : 힙 영역에 할당된 변수와 배열에 저장된 값을 출력하고 있다.
18,19행 : 6행과 7행에서 할당된 메모리 공간을 해제하고 있다.
*/